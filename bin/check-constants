#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var program = require('commander');
var checkConstants = require('../index');
var logSymbols = require('log-symbols');
var stdin = require('get-stdin');
process.title = 'check-constants';

function list(val) {
    return val.split(',').map(parseFloat);
}

function cleanStr(str) {
    return str.toLowerCase().trim();
}

program
    .description('Find numbers and strings that should be extracted to a var or const statement')
    .version(require(path.resolve(__dirname, '../package.json')).version)
    .usage('[options] <file>')
    .option('-e, --enforce-const', 'require literals to be defined using const')
    .option('-i, --ignore <numbers>', 'list numbers to ignore (default: 0,1)', list, [0, 1])
    .option('-I, --disable-ignore', 'disables the ignore list')
    .option('-s, --strings', 'check strings as well')
    .option('-r, --reporter [reporter]', 'specify the reporter to use [table|json] (default: table)', cleanStr, 'table')
    .on('--help', function() {
        console.log('  Examples:');
        console.log('');
        console.log('    $ check-constants index.js');
        console.log('    $ check-constants --reporter json index.js');
        console.log('    $ cat index.js | check-constants');
        console.log('');
    })
    .parse(process.argv);

function run(contents, params) {
    params = params || {};
    var options = {
        // Get the list of numbers to ignore
        ignore: program.disableIgnore ? [] : program.ignore,
        enforceConst: program.enforceConst,
        file: params.file,
        strings: program.strings
    };
    var output;
    try {
        output = checkConstants.inspect(contents, options);
    } catch (e) {
        console.log(logSymbols.error, e.toString());
        process.exit(1);
    }
    //no errors
    if (!output.length) {
        console.log(logSymbols.success, 'No problems');
        process.exit(0);
    }
    //get reporter name
    var log = checkConstants.log;
    var reporterFunc = log.reporters[program.reporter] || log.reporters.table;
    reporterFunc(output);
    process.exit(1);
}

function readFiles(files) {
    //TOOD: handle multiple files
    var file = files[0];
    var _contents = fs.readFileSync(path.resolve(process.cwd(), file), 'utf8');
    run(_contents, {
        file: file
    });
}

if (!process.stdin.isTTY) {
    stdin(run);
    return;
}
if (!program.args.length) {
    program.help();
    return;
}
readFiles(program.args);
